plugins {
    id 'org.jetbrains.kotlin.jvm'
    id("org.springframework.boot")
    id("io.spring.dependency-management")


    id("com.bmuschko.docker-remote-api") version '4.8.0'
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

def dockerBuildDir = 'build/docker/'
def imageVersion = '1.0'
def uniqueContainerName = 'emulator'
def imageName = "emulator"

archivesBaseName = "emulator"



repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.testcontainers', name: 'testcontainers', version: '1.13.0'

    compile group: 'io.ktor', name: 'ktor-server-core', version: '1.3.1'
    compile group: 'io.ktor', name: 'ktor-http-native', version: '1.3.1'
    compile group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.46.Final'

    compile("io.ktor:ktor-jackson:1.3.1")
    compile "io.ktor:ktor-client-apache:1.3.1"
    compile "io.ktor:ktor-server-netty:1.3.1"

    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    compile "ch.qos.logback:logback-classic:1.2.1"
    compile group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-reactive', version: '1.3.1'
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.mongodb:mongodb-driver-reactivestreams")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("io.projectreactor.kotlin:reactor-kotlin-extensions")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}
test {
    useJUnitPlatform()
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file("$dockerBuildDir/Dockerfile")
    from 'openjdk:8-jre-alpine'
    copyFile jar.archiveName, '/emulator.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/emulator.jar'
    exposePort 8080
}

task syncJar(type: Copy) {
    dependsOn assemble
    from jar.archivePath
    into dockerBuildDir
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId("$uniqueContainerName")
    onError { exc ->
        if (exc.message!=null && !exc.message.contains('NotModifiedException') && !exc.message.contains("No such container")) {
            throw new RuntimeException(exc)
        }
    }
}

task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId("$uniqueContainerName")
    onError { exc ->
        if (exc.message!=null && !exc.message.contains('NotModifiedException')&& !exc.message.contains("No such container")) {
            throw new RuntimeException(exc)
        }
    }
}

task removeImage(type: DockerRemoveImage) {
    dependsOn removeContainer
    targetImageId("$imageName:$imageVersion")
    onError { exc ->
        if (exc.message!=null && !exc.message.contains('NotModifiedException')&& !exc.message.contains("No such container")) {
            throw new RuntimeException(exc)
        }
    }
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile, syncJar
    inputDir = project.file(dockerBuildDir)
    tags = ["$imageName:$imageVersion"]
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage, removeContainer
    targetImageId buildImage.getImageId()
    containerName = "$uniqueContainerName"
    portBindings = ['8080:8080']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId("$uniqueContainerName")
}